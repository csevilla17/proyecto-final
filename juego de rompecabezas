program puzzle;

uses crt;
// Variables globales
var
  nombre, nick: string; // nombre y nick del jugador
  dificultad, size: integer;// tamaño del puzzle y nivel de dificultad del puzzle
  puzzleArray: array[1..10,1..10] of integer;// matriz que representa el puzzle
  i, j, x, y, temp, randomCount: integer;// variables auxiliares para recorrer la matriz
  
// Función para imprimir el puzzle
procedure printPuzzle();
begin
  clrscr;
  writeln('Bienvenido a Puzzle, ', nombre, ' (', nick, ')');
  writeln('Nivel de Dificultad: ', dificultad);
  for i := 1 to size do
  begin
    for j := 1 to size do
    begin
      if (puzzleArray[i,j] < 10) then
        write('0');
      write(puzzleArray[i,j], ' ');
    end;
    writeln();
  end;
end;

// Función para mezclar la matriz
procedure shuffleArray();
begin
  randomCount := 10 * dificultad;
  for i := 1 to randomCount do
  begin
    x := random(size) + 1;
    y := random(size) + 1;
    temp := puzzleArray[x,y];
    puzzleArray[x,y] := puzzleArray[size - x + 1, size - y + 1];
    puzzleArray[size - x + 1, size - y + 1] := temp;
  end;
end;


// Función para mover una ficha
procedure moveTile();
var
  move, tile: integer;
begin
  writeln('Ingrese el número de la ficha a mover: ');
  readln(tile);

  // Encontrar la ubicación actual de la ficha
  x := 0;
  y := 0;
  for i := 1 to size do
  begin
    for j := 1 to size do
    begin
      if (puzzleArray[i,j] = tile) then
      begin
        x := i;
        y := j;
      end;
    end;
  end;

  if (x = 0) or (y = 0) then
  begin
    writeln('La ficha no se encontró.');
    readln;
    exit;
  end;

  // Preguntar por la dirección del movimiento
  writeln('Seleccione la dirección del movimiento: ');
  writeln('1. Arriba');
  writeln('2. Abajo');
  writeln('3. Izquierda');
  writeln('4. Derecha');
  readln(move);

  case move of
    1:
      begin
        if (x > 1) then
        begin
          temp := puzzleArray[x,y];
          puzzleArray[x,y] := puzzleArray[x-1,y];
          puzzleArray[x-1,y] := temp;
        end;
      end;
    2:
      begin
        if (x < size) then
        begin
          temp := puzzleArray[x,y];
          puzzleArray[x,y] := puzzleArray[x+1,y];
          puzzleArray[x+1,y] := temp;
        end;
      end;
    3:
      begin
        if (y > 1) then
        begin
          temp := puzzleArray[x,y];
          puzzleArray[x,y] := puzzleArray[x,y-1];
          puzzleArray[x,y-1] := temp;
        end;
      end;
    4:
      begin
        if (y < size) then
        begin
          temp := puzzleArray[x,y];
          puzzleArray[x,y] := puzzleArray[x,y+1];
          puzzleArray[x,y+1] := temp;
        end;
      end;
      end;
end;
begin
  // Pedir el nombre y el nick del jugador
  writeln('Ingrese su nombre: ');
  readln(nombre);
  writeln('Ingrese su nick: ');
  readln(nick);

  // Pedir el nivel de dificultad
  writeln('Seleccione el nivel de dificultad:');
  writeln('1. Facil (3x3)');
  writeln('2. Medio (4x4)');
  writeln('3. Dificil (5x5)');
  readln(dificultad);

  // Calcular el tamaño del puzzle basado en el nivel de dificultad
  size := dificultad + 2;

  // Inicializar la matriz
  for i := 1 to size do
  begin
    for j := 1 to size do
    begin
      puzzleArray[i,j] := (i-1) * size + j;
    end;
  end;

  // Mezclar la matriz
  shuffleArray();

  // Jugar el puzzle
  repeat
    printPuzzle();
    moveTile();
  until false;
end.
